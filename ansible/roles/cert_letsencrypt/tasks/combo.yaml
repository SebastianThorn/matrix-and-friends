---

- name: "Create required directories in /etc/letsencrypt"
  file:
    path: "/etc/letsencrypt/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=x,o=x
  with_items:
  - account
  - certs
  - csrs
  - keys
  - server

- name: Start python webserver for 60 seconds
  ansible.builtin.shell:
    cmd: "timeout 60 python3 -m http.server 80 &"
    chdir: /etc/letsencrypt/server/

- name: "Generate a Let's Encrypt account key"
  shell: "if [ ! -f {{ letsencrypt_account_key }} ]; then openssl genrsa 4096 | tee {{ letsencrypt_account_key }}; fi"

- name: "Generate Let's Encrypt private key"
  shell: "openssl genrsa 4096 | tee /etc/letsencrypt/keys/{{ domain_name }}.key"

- name: "Generate Let's Encrypt CSR"
  shell: "openssl req -new -sha256 -key /etc/letsencrypt/keys/{{ domain_name }}.key -subj \"/CN={{ item }}\" -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf \"\n[SAN]\nsubjectAltName=DNS:{{ item }}\")) | sudo tee /etc/letsencrypt/csrs/{{ item }}.csr"
  args:
    executable: /bin/bash
  with_items:
  - "{{ base_domain }}"
  - "matrix.{{ base_domain }}"
  - "jitsi.{{ base_domain }}"
  - "riot.{{ base_domain }}"

- name: "Begin Let's Encrypt challenges"
  community.crypto.acme_certificate:
    acme_directory: "{{ acme_directory }}"
    acme_version: "{{ acme_version }}"
    account_key_src: "{{ letsencrypt_account_key }}"
    account_email: "{{ acme_email }}"
    terms_agreed: 1
    challenge: "{{ acme_challenge_type }}"
    csr: "{{ letsencrypt_csrs_dir }}/{{ item }}.csr"
    dest: "{{ letsencrypt_certs_dir }}/{{ item }}.crt"
    fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ item }}.crt"
    remaining_days: 91
  register: acme_challenge_your_domain
  with_items:
  - "{{ base_domain }}"
  - "matrix.{{ base_domain }}"
  - "jitsi.{{ base_domain }}"
  - "riot.{{ base_domain }}"

- name: "Create .well-known/acme-challenge directory"
  file:
    path: /etc/letsencrypt/server/.well-known/acme-challenge
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx

- name: Print return information from the previous task
  ansible.builtin.debug:
    var: acme_challenge_your_domain

- name: Print return information from the previous task
  ansible.builtin.debug:
    var: acme_challenge_your_domain["results"]

- name: "Implement http-01 challenge files"
  copy:
    content: "{{ acme_challenge_your_domain['results'][ansible_loop.index0]['challenge_data'][item]['http-01']['resource_value'] }}"
    dest: "/etc/letsencrypt/server/{{ acme_challenge_your_domain['results'][ansible_loop.index0]['challenge_data'][item]['http-01']['resource'] }}"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  with_items:
  - "{{ base_domain }}"
  - "matrix.{{ base_domain }}"
  - "jitsi.{{ base_domain }}"
  - "riot.{{ base_domain }}"
  loop_control:
    extended: yes

- name: "Complete Let's Encrypt challenges"
  community.crypto.acme_certificate:
    acme_directory: "{{ acme_directory }}"
    acme_version: "{{ acme_version }}"
    account_key_src: "{{ letsencrypt_account_key }}"
    account_email: "{{ acme_email }}"
    challenge: "{{ acme_challenge_type }}"
    csr: "{{ letsencrypt_csrs_dir }}/{{ item }}.csr"
    dest: "{{ letsencrypt_certs_dir }}/{{ item }}.crt"
    chain_dest: "{{ letsencrypt_certs_dir }}/chain_{{ item }}.crt"
    fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ item }}"
    data: "{{ acme_challenge_your_domain }}"
  with_items:
  - "{{ base_domain }}"
  - "matrix.{{ base_domain }}"
  - "jitsi.{{ base_domain }}"
  - "riot.{{ base_domain }}"
